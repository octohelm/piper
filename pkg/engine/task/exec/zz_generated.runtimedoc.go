/*
Package exec GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package exec

func (v *Run) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Cwd":
			return []string{
				"current workdir",
			}, true
		case "Command":
			return []string{
				"cmd for executing",
			}, true
		case "Env":
			return []string{
				"env vars",
			}, true
		case "User":
			return []string{
				"executing user",
			}, true
		case "With":
			return []string{
				"other setting",
			}, true
		case "Stdout":
			return []string{
				"exists when `with.stdout` enabled",
			}, true
		case "Stderr":
			return []string{
				"exists when `with.stdout` enabled",
			}, true

		}
		if doc, ok := runtimeDoc(&v.Task, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"some cmd",
	}, true
}

func (v *RunOption) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Failfast":
			return []string{
				"when enabled",
				"once executed failed, will break whole pipeline",
				"otherwise, just set result",
			}, true
		case "Stdout":
			return []string{
				"when enabled",
				"`result.stdout` should be with the string value",
				"otherwise, just log stdout",
			}, true
		case "StdoutOmitempty":
			return []string{
				"when enabled",
				"`result.ok` will not set be false if empty stdout",
			}, true
		case "Stderr":
			return []string{
				"when enabled",
				"`result.stderr` should be with the string value",
				"otherwise, just log stderr",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
